import {Blockchain} from '@ton/sandbox'
import {Address, beginCell, Builder, Cell, Dictionary, DictionaryValue, Slice} from '@ton/core'
import '@ton/test-utils'
import {compileFunc} from "@ton-community/func-js"
import * as fs from "node:fs"
import {VotesCollector} from "../wrappers/VotesCollector"

async function compileContract(): Promise<Cell> {
    let compileResult = await compileFunc({
        targets: ['contracts/votes-collector.fc'],
        sources: (x) => fs.readFileSync(x).toString("utf8"),
    })

    if (compileResult.status === "error") {
        console.error("Compilation Error!")
        console.error(`\n${compileResult.message}`)
        process.exit(1)
    }

    return Cell.fromBoc(Buffer.from(compileResult.codeBoc, "base64"))[0]
}

const sliceValue: DictionaryValue<Slice> = {
    serialize: (src: Slice, builder: Builder) => {
        builder.storeSlice(src)
    },
    parse: (src: Slice) => {
        return src.clone();
    }
}

describe('TvmTest', () => {
    let code: Cell
    let blockchain: Blockchain

    beforeAll(async () => {
        code = await compileContract()
    })

    beforeEach(async () => {
        blockchain = await Blockchain.create()
    })

    it('test-0', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-1', async () => {
        const data = beginCell().storeUint(BigInt("0b0"), 173).endCell()
        const msgBody = beginCell().endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-2', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 930).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 930).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 930).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 930).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 930).endCell()).storeUint(BigInt("0b0"), 1).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-3', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 723).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()
        const msgBody = beginCell().storeUint(BigInt("0b00000000000000000000000000000001"), 32).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-4', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-5', async () => {
        const data = beginCell().storeUint(BigInt("0b1"), 1).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b1"), 1).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-6', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()
        const msgBody = beginCell().storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000"), 97).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-7', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 1).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 1).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 1).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 1).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 1).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-8', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000"), 97).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-9', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1"), 1).endCell().beginParse())).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-10', async () => {
        const data = beginCell().storeRef(beginCell().storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000"), 54).endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 413).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 413).endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 413).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 187).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-11', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 205).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-12', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()
        const msgBody = beginCell().storeUint(BigInt("0b000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-13', async () => {
        const data = beginCell().storeUint(BigInt("0bendCell()
        const msgBody = beginCell().storeUint(BigInt("0b0000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-14', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-15', async () => {
        const data = beginCell().storeUint(BigInt("0b1"), 1).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b1"), 1).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b00000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 872).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-16', async () => {
        const data = beginCell().storeUint(BigInt("0b0"), 256).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 301,
        })
    })

    it('test-17', async () => {
        const data = beginCell().storeRef(beginCell().storeUint(BigInt("0b00000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 155).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b00000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 155).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 304,
        })
    })

    it('test-18', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1"), 1).endCell()).storeUint(BigInt("0b1"), 1).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 301,
        })
    })

    it('test-19', async () => {
        const data = beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 304,
        })
    })

    it('test-20', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 92).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 436).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-21', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 884).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-22', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 331).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 264).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-23', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 474).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-24', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 723).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-25', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeUint(BigInt("0b011001100000011010"), 18).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 290).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-26', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 353).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 329).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-27', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeUint(BigInt("0b100000"), 6).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 297).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 298).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 298).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-28', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 48).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000"), 49).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000"), 49).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-29', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeUint(BigInt("0b100000000000000"), 15).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 468).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 469).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 347).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-30', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 550).endCell()
        const msgBody = beginCell().storeUint(BigInt("0b00000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 353).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-31', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 863).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 103).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-32', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).endCell()
        const msgBody = beginCell().storeUint(BigInt("0b00000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 353).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-33', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0b00000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 608).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-34', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 352).endCell()
        const msgBody = beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-35', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 147).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-36', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 239).endCell()
        const msgBody = beginCell().storeUint(BigInt("0b00000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 353).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-37', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1"), 1).endCell().beginParse())).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-38', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeUint(BigInt("0b0"), 402).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 403).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 403).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000"), 18).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-39', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000"), 11).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 722).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 723).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-40', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 625).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 625).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 625).endCell()).storeUint(BigInt("0b0"), 625).endCell()).storeUint(BigInt("0b0"), 459).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-41', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 65).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 65).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 65).endCell()).storeUint(BigInt("0b0"), 65).endCell()).storeUint(BigInt("0b0"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-42', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 178).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 178).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 178).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 178).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 178).endCell()).storeUint(BigInt("0b00000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 353).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-43', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 798).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 798).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 798).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 798).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 36).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-44', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 502).endCell()).storeUint(BigInt("0b0"), 502).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 502).endCell()).storeUint(BigInt("0b0"), 502).endCell()).storeUint(BigInt("0b0"), 502).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-45', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 141).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 141).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 141).endCell()).storeUint(BigInt("0b0"), 141).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-46', async () => {
        const data = beginCell().storeUint(BigInt("0b0"), 722).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 722).endCell()).storeUint(BigInt("0b0"), 722).endCell()).storeUint(BigInt("0b0"), 722).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-47', async () => {
        const data = beginCell().storeUint(BigInt("0b0"), 233).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0b0"), 233).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 50).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-48', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 329).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 329).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 329).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 474).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-49', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 111).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 190).endCell()).storeUint(BigInt("0b0"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-50', async () => {
        const data = beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 967).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 967).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b0"), 666).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-51', async () => {
        const data = beginCell().storeUint(BigInt("0b0"), 893).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 893).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 121).endCell()).storeUint(BigInt("0b0"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-52', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 701).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000"), 313).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-53', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 68).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000"), 69).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000"), 69).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-54', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 869).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 354).endCell()).storeUint(BigInt("0b0000000000000000000000000000011011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-55', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000"), 30).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 29).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 512).endCell()).storeUint(BigInt("0b0000000000000000000000000000011011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-56', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 316).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 317).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 141).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110101101001111"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-57', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeUint(BigInt("0bendCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 476).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-58', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeUint(BigInt("0b0"), 135).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 136).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 136).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 360).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-59', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 700).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 512).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-60', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 315).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 316).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 190).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-61', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000"), 28).endCell().beginParse())).storeUint(BigInt("0b0"), 290).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 291).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 554).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-62', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 197).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 198).endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 198).endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 198).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-63', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 281).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b100000"), 6).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-64', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 609).endCell()
        const from = Address.parseRaw("-1:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-65', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(0n, beginCell().storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell().beginParse())).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-66', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 98).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 99).endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 99).endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 99).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-67', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 449).endCell().beginParse()).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 207).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 449).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 449).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 256).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-68', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 141).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-69', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1"), 1).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-70', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeUint(BigInt("0b0"), 8).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000"), 9).endCell()).storeUint(BigInt("0b100000000"), 9).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000"), 48).endCell()).storeUint(BigInt("0b00000000000000000000000000000110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 608).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-71', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeUint(BigInt("0b1000000000000000000000000"), 25).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 706).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-72', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 91).endCell().beginParse()).set(57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell().beginParse())).storeUint(BigInt("0b0"), 1019).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 257).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 352).endCell()
        const from = Address.parseRaw("-1:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-73', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-2n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000"), 47).endCell().beginParse()).set(-1n, beginCell().storeUint(BigInt("0b1111111111111111111111111111111100000000000000000000000000000000"), 64).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 346).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000"), 47).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000"), 47).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-74', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 896).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 429).endCell()).storeUint(BigInt("0b0000000000000000000000000000011011111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-75', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeUint(BigInt("0b0110011000000110101011110011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 427).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 493).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 512).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-76', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0110011000000110101011110011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111101"), 1015).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 24).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 168).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 168).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-77', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 293).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 136).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 293).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-78', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 896).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000"), 298).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-79', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 347).endCell().beginParse())).storeUint(BigInt("0b0"), 13).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 512).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-80', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 251).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 252).endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 252).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-81', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeUint(BigInt("0bendCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 888).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 358).endCell()).storeUint(BigInt("0b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 352).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-82', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 500).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01111111111111111111111111111111"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 887).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-83', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 181).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 182).endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 182).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 121).endCell()).storeUint(BigInt("0b00000000000000000000000000000110111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 608).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-84', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 200).endCell()
        const msgBody = beginCell().storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 609).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-85', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 316).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-86', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000100001001000"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 869).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 122).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-87', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-2n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000"), 62).endCell().beginParse())).storeUint(BigInt("0b0"), 595).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000"), 62).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000"), 62).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 256).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-88', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-89', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1"), 1).endCell().beginParse()).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000101000010011110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()
        const msgBody = beginCell().storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-90', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 393).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 394).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 394).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-91', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 192).endCell().beginParse()).set(0n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000100111000001000"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 171).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 192).endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 192).endCell()).storeUint(BigInt("0b0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 256).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-92', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 865).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 326).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-93', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 150).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 151).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 151).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b0000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 352).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-94', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 808).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 612).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-95', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 452).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 453).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 453).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeUint(BigInt("0bendCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-96', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 8).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000"), 9).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000"), 327).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001101111111111111111111111111111111111111111111111111111111111111111"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-97', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 237).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 160).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-98', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 987).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 428).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-99', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819966n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 250).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-100', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 317).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-101', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 256).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 787).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-102', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeUint(BigInt("0b0"), 892).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 494).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-103', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000"), 18).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 639).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-104', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 35).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-105', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeUint(BigInt("0b100000000000000000000000000"), 27).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 159).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 421).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-106', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeUint(BigInt("0b00000000000000000001000111110010"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 520).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 521).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 521).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-107', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 170).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 171).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 171).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-108', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-2n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b11111111111111111111111111111111"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 126).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101"), 513).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-109', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell().beginParse()).set(0n, beginCell().storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 154).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-110', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 719).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000"), 72).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-111', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 802).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-112', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 772).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-113', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(0n, beginCell().storeUint(BigInt("0b100000000000000000000000000"), 27).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 102).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-114', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue)).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 118).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 119).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 188).endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-115', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000"), 31).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 670).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-116', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 105).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 651).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 377).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-117', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-2n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell().beginParse()).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b0110011000000110101011110011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 936).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 256).endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-118', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 80).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 257).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-119', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 608).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-120', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 369).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-121', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-2n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 256).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 446).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 427).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 256).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-122', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(31565n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 1020).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 443).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111101101001101"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-123', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 755).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-124', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 705).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-125', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeUint(BigInt("0b0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 256).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 480).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeUint(BigInt("0b01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000"), 260).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-126', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-2n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b11111111111111111111111111111111"), 32).endCell().beginParse()).set(-1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 140).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 312).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 513).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-127', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 764).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 698).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-128', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 877).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 513).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-129', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 222).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0bendCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-130', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-1n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 768).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-131', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(-57896044618658097711785492504343953926634992332820282019728792003956564819967n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 323).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), 256).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-132', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 775).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 513).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-133', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse()).set(1n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 618).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeUint(BigInt("0b0"), 32).endCell()).storeUint(BigInt("0bendCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-134', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 61).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeUint(BigInt("0b01100110000001101010111100111110"), 32).endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-135', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(57896044618658097711785492504343953926634992332820282019728792003956564819966n, beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell().beginParse()).set(0n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 12).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"), 256).endCell()).storeUint(BigInt("0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-136', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 21).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000"), 22).endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 472).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-137', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 71).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000"), 40).endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 256).endCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-138', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 487).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeUint(BigInt("0bendCell()).storeUint(BigInt("0b000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = false
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })

    it('test-139', async () => {
        const data = beginCell().storeDict(Dictionary.empty(Dictionary.Keys.BigInt(256), sliceValue).set(-57896044618658097711785492504343953926634992332820282019728792003956564819968n, beginCell().storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b0"), 32).endCell().beginParse())).storeUint(BigInt("0b0"), 229).endCell()
        const msgBody = beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeUint(BigInt("0b10000000000000000000000000000000"), 32).endCell()).storeRef(beginCell().endCell()).storeUint(BigInt("0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), 512).endCell()).storeUint(BigInt("0b000000000000000000000000000001101111111111111111111111111111111111111111111111111111111111111111"), 96).endCell()
        const from = Address.parseRaw("-1:0000000000000000000000000000000000000000000000000000000000000000")
        const bounce = true
        const bounced = false

        const contractAddress = Address.parseRaw("0:0000000000000000000000000000000000000000000000000000000000000000")
        const contract = blockchain.openContract(new VotesCollector(contractAddress, { code, data }))
        await contract.initializeContract(blockchain, 10000000n)
  
        const sentMessageResult = await contract.internal(
            blockchain,
            from,
            msgBody,
            10000000n,
            bounce,
            bounced
        )
        expect(sentMessageResult.transactions).toHaveTransaction({
            from: from,
            to: contractAddress,
            exitCode: 9,
        })
    })
})